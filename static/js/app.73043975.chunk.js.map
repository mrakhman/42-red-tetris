{"version":3,"sources":["src/config/constants.ts","src/client/constants/game.ts","App.tsx","src/client/navigation/index.tsx","src/client/screens/NotFoundScreen.tsx","src/client/screens/Ranking/index.tsx","src/client/navigation/LinkingConfiguration.ts","src/client/constants/tetriminos.ts","src/client/components/Digits/index.tsx","src/client/screens/Playground/utils.ts","src/client/components/Block/index.tsx","src/client/controllers/blockControllers.ts","src/client/components/Matrix/index.tsx","src/client/hooks/useKeyEvent/index.tsx","src/client/screens/Playground/index.tsx","src/client/screens/Login/ChooseUsername.tsx","src/client/screens/Login/ChooseRoom.tsx","src/client/screens/Login/index.tsx","web-build/register-service-worker.js","src/client/constants/keyboard.ts","assets/sprite.png","src/client/context/UserContext.ts","src/client/context/SocketContext.ts","src/client/screens/Login/utils.ts","src/client/components/Keypad/index.tsx","src/client/hooks/useWindowDimensions/index.ts","src/client/components/Gameboy/PreviewText.tsx","src/client/components/Gameboy/index.tsx"],"names":["SOCKETS","CREATE_USER","FETCH_CURRENT_PLAYER","CHOOSE_ROOM","ENTER_ROOM","UPDATE_ROOM_PLAYERS","PLAYER_LEFT","START_GAME","PAUSE_GAME","PENALTY_ROWS","UPDATE_SPECTRUM","FETCH_WAITING_ROOMS","UPDATE_WAITING_ROOMS","GAMEOVER","FETCH_ROOM_RANKING","UPDATE_SCORE","REDIRECT_TO_RANKING","CHAT_MESSAGE","FORBIDDEN","SCORING","ROW_DESTROYED","PIECE_PLACED","LAST_PLAYER","maxPlayersLimit","App","window","addEventListener","e","keyCode","target","document","body","preventDefault","Navigation","colorScheme","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","createStackNavigator","useState","undefined","socket","setSocket","username","room","userContext","setUserContext","Provider","value","newSocket","io","getSocket","Navigator","screenOptions","headerShown","Screen","name","component","Login","Playground","Ranking","NotFoundScreen","options","title","navigation","style","styles","container","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","alignSelf","marginBottom","subtitle","tableContainer","width","flexDirection","tableHeader","tableContent","useContext","SocketContext","UserContext","params","useRoute","rankedRoomPlayers","setRoomPlayers","console","log","socketAccessForbidden","socketFetchRoomRanking","players","useEffect","Error","emit","roomName","gameMode","on","removeListener","length","_","map","index","key","player","score","prefixes","Linking","config","screens","Root","NotFound","cellState","blockShape","I","L","J","Z","S","O","T","initialPos","blockTypes","fill","Array","OCCUPIED","blankLine","FREE","penaltyLine","BLOCKED","blankMatrix","blockMatrix","Digits","imageURI","Asset","fromModule","require","uri","View","val","ImageBackground","source","height","overflow","imageStyle","left","resizeMode","top","roomPlayersNames","outer","borderColor","borderWidth","outerSpectrum","inner","innerSpectrum","Block","isSpectrum","blockCreate","pos","shape","type","timeStamp","Date","now","blockRotate","block","result","row","reverse","blockFall","n","blockRight","blockLeft","blockGetBlockPos","positions","rowIndex","colIndex","push","isBlock","find","shapePos","isEqual","isBlockValid","matrix","hitBlock","col","rows","cols","min","right","max","bottom","blockGetCorner","printBlock","newMatrix","cloneDeep","size","Matrix","blockWidth","useKeyEvent","setIsPause","setMatrix","setBlock","useKey","_key","isWidgetOpened","keyboard","reset","sample","prevIsPause","prevMatrix","rotate","currentBlock","down","space","nextBlock","newState","blockDrop","useNavigation","roomPlayers","isPause","setCurrentPlayer","roomLeader","setRoomLeader","gameover","setGameover","gameStarted","setGameStarted","isSoloMode","includes","socketChatMessage","message","addResponseMessage","text","socketFetchCurrentPlayer","socketUpdateRoomPlayers","data","newLeader","isLeader","prevCurrentPlayer","id","socketReceiveStartGame","tilesStack","startTile","socketReceivePauseGame","prevState","socketReceivePenaltyRows","rowsNumber","addPenaltyRows","socketEmitUpdatePlayerScore","socketReceiveRedirectToRanking","socketReceiveGameover","endGame","roomWinner","isWinner","socketReceiveUpdateSpectrum","dropMessages","leader","penaltyMatrix","slice","nextBlockType","useInterval","socketEmitGameover","bottomMatrix","topMatrix","sum","deletedRows","destroyBlock","socketEmitPenaltyRows","spectrum","socketEmitUpdateSpectrum","j","flag","i","convertMatrixToSpectrum","Gameboy","Text","position","zIndex","marginLeft","currentPlayerUsername","filter","filteredOpponents","marginVertical","join","handleNewUserMessage","ChooseUsername","props","setScreenNumber","ussernameError","setUsernameError","error","TextInput","onChangeText","input","TouchableOpacity","button","checkUsername","then","catch","err","ChooseRoom","roomNameError","setRoomNameError","joinRoomError","setJoinRoomError","waitingRooms","setWaitingRooms","handleFetchWaitingRooms","roomNames","handleUpdateWaitingRooms","socketEmitChooseOrCreateRoom","composeSoloRoomName","checkRoomName","onCreateRoomPress","waitingRoom","roomsList","isRoomPlayersLimitAvailable","onJoinRoomPress","screenNumber","textAlign","borderRadius","margin","navigator","serviceWorker","register","scope","info","module","exports","createContext","isEmpty","checkTextLength","checkSpecialChars","regexpr","RegExp","match","a","async","axios","get","response","random","RoundButton","label","disabled","React","useRef","ref","current","blur","shadowColor","shadowOffset","shadowOpacity","shadowRadius","Keypad","opponentsNumber","showStartButton","showPauseButton","isButtonDisabled","keyDown","dispatchEvent","KeyboardEvent","which","socketEmitStartGame","socketEmitPlayPause","sound","navigate","socketExitPage","marginRight","useWindowDimensions","dim","Dimensions","dimensions","setDimensions","stillCareAboutTheCallback","updateDimensions","nextDimensions","removeEventListener","useDimensionsSync","PreviewText","isMultiplayerMode","secondLineText","scale","children","w","h","isKeypadDisabled","gameboy","transform","display","opacity","borderBottomColor","borderLeftColor","borderRightColor","borderTopColor","paddingBottom","paddingHorizontal"],"mappings":"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","file":"static/js/app.73043975.chunk.js","sourcesContent":["export const SOCKETS = {\n  /* ---- User ---- */\n  CREATE_USER: 'create user',\n  FETCH_CURRENT_PLAYER: 'fetch current player',\n\n  /* ---- Room ---- */\n  CHOOSE_ROOM: 'create or join room',\n  ENTER_ROOM: 'enter room',\n  UPDATE_ROOM_PLAYERS: 'update room players',\n  PLAYER_LEFT: 'player left',\n  START_GAME: 'start game',\n  PAUSE_GAME: 'pause game',\n  PENALTY_ROWS: 'penalty rows',\n  UPDATE_SPECTRUM: 'update spectrum',\n  \n  /* ---- Game ---- */\n  FETCH_WAITING_ROOMS: 'fetch waiting rooms',\n  UPDATE_WAITING_ROOMS: 'update waiting rooms',\n  GAMEOVER: 'gameover',\n  FETCH_ROOM_RANKING: 'fetch room ranking',\n  UPDATE_SCORE: 'update score',\n  REDIRECT_TO_RANKING: 'redirect to ranking',\n  \n  /* ---- Chat ---- */\n  CHAT_MESSAGE: 'chat message',\n\n  /* ---- Error ---- */\n  FORBIDDEN: 'access forbidden',\n};\n\nexport const SCORING = {\n  ROW_DESTROYED: 10,\n  PIECE_PLACED: 4,\n  LAST_PLAYER: 200,\n};\n","export const maxPlayersLimit = 4;\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport Navigation from './src/client/navigation';\n\nexport default function App(): JSX.Element | null {\n  // Prevent window from scrolling on Space button click\n  window.addEventListener('keydown', function(e) {\n    if(e.keyCode === 32 && e.target == document.body) {\n      e.preventDefault();\n    }\n  });\n\n  return (\n    <SafeAreaProvider>\n      <Navigation />\n      <StatusBar />\n    </SafeAreaProvider>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React, { useState } from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '/client/screens/NotFoundScreen';\nimport Login from '/client/screens/Login';\nimport Playground from '/client/screens/Playground';\nimport Ranking from '/client/screens/Ranking';\nimport LinkingConfiguration from '/client/navigation/LinkingConfiguration';\nimport io from 'socket.io-client';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme?: ColorSchemeName }): JSX.Element {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const [socket, setSocket] = useState<undefined | SocketIOClient.Socket>(undefined);\n\n  const getSocket = () => {\n    if (socket) {\n      return socket;\n    }\n    const newSocket = io(`${process.env.SERVER_URL}`);\n    setSocket(newSocket);\n    return newSocket;\n  };\n  \n  const [userContext, setUserContext] = useState<UserContextType>({username: undefined, room: undefined});\n\n  return (\n    <SocketContext.Provider value={getSocket()} >\n      <UserContext.Provider value={{userContext, setUserContext}} >\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Root\" component={Login} />\n          <Stack.Screen name=\"Playground\" component={Playground} />\n          <Stack.Screen name=\"Ranking\" component={Ranking} />\n          <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n        </Stack.Navigator>\n      </UserContext.Provider>\n    </SocketContext.Provider>\n  );\n}\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>): JSX.Element {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{'This screen doesn\\'t exist.'}</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import  React, { useState, useEffect, useContext } from 'react';\nimport _ from 'lodash';\nimport { StyleSheet, View, Text } from 'react-native';\nimport { useRoute, RouteProp } from '@react-navigation/native';\n\nimport Gameboy from '/client/components/Gameboy';\nimport { SOCKETS } from '/config/constants';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\n\nconst Ranking = (): JSX.Element => {\n  const socket = useContext(SocketContext);\n  const { userContext, setUserContext } = useContext(UserContext);\n\n  const route = useRoute<RouteProp<RootStackParamList, 'Ranking'>>();\n  const { params } = route;\n  // const { room, username } = userContext;\n  const { room, username } = params ?? {};\n  const [rankedRoomPlayers, setRoomPlayers] = useState<PlayerType[]>([]);\n\n  console.log('roomPlayers:', rankedRoomPlayers);\n\n  const socketAccessForbidden = () => {\n    console.log('aaaaaaaaaaaa forbidden');\n  };\n\n  const socketFetchRoomRanking = (players: PlayerType[]) => {\n    setRoomPlayers(players);\n  };\n\n\n  useEffect(() => {\n    if (!socket) throw Error('No socket');\n    // TODO: Here I tested how I can forbid access to pages that I entered fom URL but sis not create. Uncomment it at the end of development\n    // socket.emit(SOCKETS.FETCH_ROOM_RANKING, {username, roomName: room, gameMode: 'not solo'});\n    socket.emit(SOCKETS.FETCH_ROOM_RANKING, {username, roomName: room, gameMode: 'not solo'});\n    socket.on(SOCKETS.FORBIDDEN, socketAccessForbidden);\n    socket.on(SOCKETS.FETCH_ROOM_RANKING, socketFetchRoomRanking);\n\n    return () => {\n      socket.removeListener(SOCKETS.FORBIDDEN, socketAccessForbidden);\n      socket.removeListener(SOCKETS.FETCH_ROOM_RANKING, socketFetchRoomRanking);\n    };\n  }, []);\n\n  return (\n    <Gameboy>\n      <View style={{ justifyContent: 'space-between' }}>\n        <Text style={styles.title}>Game report</Text>\n        {username && rankedRoomPlayers.length > 1 && (username === rankedRoomPlayers[0].username)\n          ? <Text style={styles.subtitle}>{username}, you are the winner!</Text>\n          : <Text style={styles.subtitle}>{username} @ {room}</Text>\n        }\n        <View style={styles.tableContainer}>\n          <View>\n            <Text style={styles.tableHeader}>Place</Text>\n            {_.map(rankedRoomPlayers, (_, index) =>\n              <Text key={index} style={styles.tableContent}>{index + 1}</Text>)}\n          </View>\n          <View>\n            <Text style={styles.tableHeader}>Name</Text>\n            {_.map(rankedRoomPlayers, (player, index) =>\n              <Text key={index} style={styles.tableContent}>{player.username}</Text>)}\n          </View>\n          <View>\n            <Text style={styles.tableHeader}>Score</Text>\n            {_.map(rankedRoomPlayers, (player, index) =>\n              <Text key={index} style={styles.tableContent}>{player.score}</Text>)}\n          </View>\n        </View>\n      </View>\n    </Gameboy>\n  );\n};\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 26,\n    fontWeight: 'bold',\n    alignSelf: 'center',\n    marginBottom: '10%',\n  },\n  subtitle: {\n    fontSize: 24,\n    alignSelf: 'center',\n    marginBottom: '10%',\n  },\n  tableContainer: {\n    width: 300,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  tableHeader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  tableContent: {\n    fontSize: 18,\n    marginBottom: 3,\n    marginTop: 3,\n  },\n});\n\nexport default Ranking;\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: '/',\n      Playground: '/play',\n      Ranking: '/ranking',\n      NotFound: '*',\n    },\n  },\n};\n","import _ from 'lodash';\n\nexport const blockShape = {\n  I: [\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ],\n  L: [\n    [0, 0, 1],\n    [1, 1, 1],\n    [0, 0, 0],\n  ],\n  J: [\n    [1, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0],\n  ],\n  Z: [\n    [1, 1, 0],\n    [0, 1, 1],\n    [0, 0, 0],\n  ],\n  S: [\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 0],\n  ],\n  O: [\n    [1, 1],\n    [1, 1],\n  ],\n  T: [\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0],\n  ],\n};\n\nexport const initialPos = {\n  I: [-2, 3],\n  L: [-2, 4],\n  J: [-2, 4],\n  Z: [-2, 4],\n  S: [-2, 4],\n  O: [-2, 4],\n  T: [-2, 4],\n};\n\nexport const blockTypes: TetriminosType[] = ['I','L','J','Z','S','O', 'T'];\n\nexport const speeds = [800, 650, 500, 370, 250, 160];\n\nexport const delays = [50, 60, 70, 80, 90, 100];\n\nexport enum cellState {\n  FREE,\n  OCCUPIED,\n  BLOCKED,\n}\n\nexport const fillLine = _.fill(Array(10), cellState.OCCUPIED); // never used\n\nexport const blankLine = _.fill(Array(10), cellState.FREE);\n\nexport const penaltyLine = _.fill(Array(10), cellState.BLOCKED);\n\nexport const blankMatrix: Matrix = _.map(Array(20), () => _.fill(Array(10), cellState.FREE));\n\nexport const blockMatrix: Matrix = _.map(Array(2), () => _.fill(Array(4), cellState.FREE));\n","import _ from 'lodash';\nimport { Asset } from 'expo-asset';\nimport { ImageBackground, View, ViewStyle } from 'react-native';\nimport * as React from 'react';\n\nexport default function Digits({ style }: { style?: ViewStyle }): JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const imageURI = Asset.fromModule(require('../../../../assets/sprite.png')).uri;\n  return (\n    <View style={[{ flexDirection: 'row' }, style]} >\n      {_.map(Array(6), (val, index: number) => <ImageBackground\n        key={index}\n        source={{ uri: imageURI }}\n        style={{ width: 14, height: 24, overflow: 'hidden' }}\n        imageStyle={{\n          height: 186,\n          left: -215,\n          resizeMode: 'cover',\n          top: -25,\n          width: 400,\n        }}\n      />)}\n    </View>\n  );\n}\n","import _ from 'lodash';\n\nimport { cellState } from '/client/constants/tetriminos';\n\nconst formatChatTitle = (leader: string): string => {\n  return `Leader: ${leader}`;\n};\n\nconst formatChatSubtitle = (players: string[]): string => {\n  if (players.length === 0) return 'No players';\n  return `Players: ${players.join(', ')}`;\n};\n\nconst roomPlayersNames = (players?: PlayerType[]): string[] => {\n  if (!players || players.length === 0) return [];\n  const namesArray = players.map((player) => player.username);\n  return namesArray;\n};\n\nconst convertMatrixToSpectrum = (matrix: Matrix): Matrix => {\n  const result = _.cloneDeep(matrix);\n  for (let j = 0; j < matrix[0].length; j++) {\n    let flag = false;\n    for (let i = 0; i < matrix.length; i++) {\n      if (matrix[i][j] === cellState.OCCUPIED)\n        flag = true;\n      if (flag)\n        result[i][j] = cellState.OCCUPIED;\n    }\n  }\n  return result;\n};\n\n// const rowFillWithOccupied = (row: number[]): number[] => {\n//   const index = _.indexOf(row, cellState.OCCUPIED);\n//   if (index === -1) return row;\n//   return(_.fill(row, cellState.OCCUPIED, index));\n// };\n\n// const transposeMatrix = (matrix: Matrix): Matrix => {\n//   const result = [];\n//   for (let i = 0; i < matrix[0].length; i++) {\n//     result.push([]);\n//     for (let j = 0; j < matrix.length; j++) {\n//       result[i].push(matrix[j][i]);\n//     }\n//   }\n//   return(result);\n// };\n\n// const fillSpectrum = (matrix: Matrix): Matrix => {\n//   const transposedMatrix = transposeMatrix(matrix);\n//   const transposedFilled = _.map(transposedMatrix, (array) => rowFillWithOccupied(array));\n//   return transposeMatrix(transposedFilled);\n// };\n\nexport { formatChatSubtitle, formatChatTitle, roomPlayersNames, convertMatrixToSpectrum };\n","import { StyleSheet, View } from 'react-native';\nimport * as React from 'react';\n\nimport { cellState } from '/client/constants/tetriminos';\n\nconst styles = StyleSheet.create({\n  outer: {\n    alignItems: 'center',\n    borderColor: '#879372',\n    borderWidth: 1,\n    height: 20,\n    justifyContent: 'center',\n    width: 20,\n  },\n  outerSpectrum: {\n    alignItems: 'center',\n    borderColor: '#879372',\n    borderWidth: 1,\n    height: 6,\n    justifyContent: 'center',\n    width: 6,\n  },\n  inner: {\n    height: 12,\n    width: 12,\n    backgroundColor: '#879372',\n  },\n  innerSpectrum: {\n    height: 2,\n    width: 2,\n    backgroundColor: '#879372',\n  },\n});\n\nconst Block = ({ value, isSpectrum }: { value: CellStateType | number, isSpectrum?: boolean }): JSX.Element => {\n  return (\n    isSpectrum\n      ?\n      <View style={[styles.outerSpectrum, value === cellState.OCCUPIED ? { borderColor: 'black' } : (value === cellState.BLOCKED ? { borderColor: 'black'} : undefined)]}>\n        <View style={[styles.innerSpectrum, value === cellState.OCCUPIED ? { backgroundColor: 'black' } : (value === cellState.BLOCKED ? { backgroundColor: 'transparent'} : undefined)]} />\n      </View>\n      :\n      <View style={[styles.outer, value === cellState.OCCUPIED ? { borderColor: 'black' } : (value === cellState.BLOCKED ? { borderColor: 'black'} : undefined)]}>\n        <View style={[styles.inner, value === cellState.OCCUPIED ? { backgroundColor: 'black' } : (value === cellState.BLOCKED ? { backgroundColor: 'transparent'} : undefined)]} />\n      </View>\n  );\n};\n\nexport default Block;\n","import _ from 'lodash';\n\nimport { blockShape, initialPos, blankLine, cellState } from '/client/constants/tetriminos';\n\nconst blockCreate = ({pos, shape, type, timeStamp}: BlockOption): BlockType => {\n  return {\n    pos: pos ?? initialPos[type],\n    shape: shape ?? blockShape[type],\n    type: type,\n    timeStamp: timeStamp ?? Date.now(),\n  };\n};\n\nconst blockRotate = (block: BlockType): BlockType => {\n  const shape = block.shape;\n  const result: number[][] = shape[0].map((val, index) => shape.map(row => row[index]).reverse());\n\n  return {\n    pos: block.pos,\n    shape: result,\n    type: block.type,\n    timeStamp: block.timeStamp,\n  };\n};\n\nconst blockFall = (block: BlockType, n = 1): BlockType => {\n  return {\n    pos: [block.pos[0] + n, block.pos[1]],\n    shape: block.shape,\n    type: block.type,\n    timeStamp: block.timeStamp,\n  };\n};\n\nconst blockRight = (block: BlockType): BlockType => {\n  return {\n    pos: [block.pos[0], block.pos[1] + 1],\n    shape: block.shape,\n    type: block.type,\n    timeStamp: block.timeStamp,\n  };\n};\n\nconst blockLeft = (block: BlockType): BlockType => {\n  return {\n    pos: [block.pos[0], block.pos[1] - 1],\n    shape: block.shape,\n    type: block.type,\n    timeStamp: block.timeStamp,\n  };\n};\n\nconst blockDrop = (block: BlockType, matrix: Matrix): BlockType => {\n  let newState = blockCreate({ type: block.type, pos: block.pos, shape: block.shape });\n\n  while (isBlockValid(blockFall(newState), matrix)) { \n    newState = blockFall(newState);\n  }\n  return newState;  \n};\n\nconst blockGetBlockPos = (block: BlockType): number[][] => {\n  const positions: number[][] = [];\n  _.map(block.shape, (row, rowIndex) =>\n    _.map(row, (val, colIndex) => { \n      if (val) positions.push([rowIndex + block.pos[0], colIndex + block.pos[1]]);\n    }));\n  return positions;\n};\n\nconst blockGetCorner = (block: BlockType): { left: number, top: number, right: number, bottom: number } => { \n  const rows = _.map(blockGetBlockPos(block), ([row]) => row);\n  const cols = _.map(blockGetBlockPos(block), ([, col]) => col);\n  return {\n    left: _.min(cols) ?? 0,\n    top: _.min(rows) ?? 0,\n    right: _.max(cols) ?? 0,\n    bottom: _.max(rows) ?? 0,\n  };\n};\n\nconst isBlock = (block: BlockType, pos: number[]): boolean => { \n  return _.find(blockGetBlockPos(block), (shapePos) => _.isEqual(shapePos, pos)) !== undefined;\n};\n\nconst isBlockValid = (block: BlockType, matrix: Matrix): boolean => { \n  const hitBlock = _.find(blockGetBlockPos(block), ([row, col]) => matrix?.[row]?.[col] === cellState.BLOCKED || matrix?.[row]?.[col] === cellState.OCCUPIED);\n  const { left, right, bottom } = blockGetCorner(block);\n  return bottom < 20\n    && left >= 0\n    && right < 10\n    && !hitBlock;\n};\n\nconst printBlock = (block: BlockType, matrix: Matrix): Matrix => { \n  const newMatrix = _.cloneDeep(matrix);\n  _.map(blockGetBlockPos(block), (pos) => {\n    if (pos[0] >= 0 && pos[0] < _.size(newMatrix)\n      && pos[1] >= 0 && pos[1] < _.size(newMatrix[0])) {\n      newMatrix[pos[0]][pos[1]] = cellState.OCCUPIED;\n    }\n  });\n  return newMatrix;\n};\n\nconst destroyBlock = (matrix: Matrix): { newMatrix: Matrix, deletedRows: number} => {\n  let bottomMatrix: Matrix = [];\n  let topMatrix: Matrix = [];\n  _.map(matrix, (row) => {\n    // Row sum = 10 when row is complete (cellState.OCCUPIED);\n    // Row sum > 10 (row sum = 20) when there is a penalty row (because penalty row consists of cellState.BLOCKED = 2)\n    if (_.sum(row) < 10 || _.sum(row) > 10) {\n      bottomMatrix = _.cloneDeep([...bottomMatrix, row]);\n      // TODO: We can send SOCKETS.SPECTER_UPDATE here when bottomMatrix.length === 20\n    } else {\n      topMatrix = _.cloneDeep([...topMatrix, blankLine]);\n    }\n  });\n  console.log('Destroy', _.cloneDeep([...topMatrix, ...bottomMatrix])); // TODO: rm\n  return ({ newMatrix: _.cloneDeep([...topMatrix, ...bottomMatrix]), deletedRows: topMatrix.length });\n};\n\nexport { \n  blockCreate,\n  blockRotate,\n  blockFall,\n  blockRight,\n  blockLeft,\n  blockDrop,\n  blockGetBlockPos,\n  blockGetCorner,\n  isBlock,\n  isBlockValid,\n  printBlock,\n  destroyBlock,\n};\n","import _ from 'lodash';\nimport { View, ViewStyle, StyleSheet } from 'react-native';\nimport * as React from 'react';\n\nimport BlockComponent from '/client/components/Block';\nimport { isBlock } from '/client/controllers/blockControllers';\nimport { cellState } from '/client/constants/tetriminos';\n\n\nconst Matrix = ({ block, matrix, style, isSpectrum }: { block: BlockType, matrix: Matrix, style?: ViewStyle, isSpectrum?:boolean }): JSX.Element => {\n  const blockWidth = isSpectrum ? 8 : 22;\n  return (\n    <View style={[styles.container, { height: _.size(matrix) * blockWidth }, style]}>\n      {_.map(matrix, (row, rowIndex) =>\n        <View key={rowIndex} style={{ flexDirection: 'row', width: _.size(row) * blockWidth, justifyContent: 'space-between' }}>\n          {_.map(row, (value, colIndex) => <BlockComponent key={colIndex} isSpectrum={isSpectrum} value={isBlock(block, [rowIndex, colIndex]) ? cellState.OCCUPIED : value} />)}\n        </View>)}\n    </View>\n  );\n};\n\nexport default Matrix;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 2, justifyContent: 'space-between', borderColor: 'black', borderWidth: 1, backgroundColor: '#9ead86',\n  },\n});\n   ","import { Dispatch, SetStateAction } from 'react';\nimport useKey from 'use-key-hook';\nimport _ from 'lodash';\nimport { isWidgetOpened } from '/client/components/Chat';\n\nimport { blankMatrix } from '/client/constants/tetriminos';\nimport { blockTypes } from '/client/constants/tetriminos';\nimport { keyboard } from '/client/constants/keyboard';\nimport {\n  blockCreate,\n  blockRotate,\n  blockFall,\n  blockRight,\n  blockLeft,\n  blockDrop,\n  isBlockValid,\n  printBlock,\n} from '/client/controllers/blockControllers';\n\nexport const useKeyEvent = ({ setIsPause, setMatrix, setBlock }\n  : {\n    setIsPause: Dispatch<SetStateAction<boolean>>,\n    setMatrix: Dispatch<SetStateAction<Matrix>>,\n    setBlock: Dispatch<SetStateAction<BlockType>>,\n  }): void => {\n  useKey((_key: number, { keyCode }: { keyCode: number }) => {\n    // When Chat widget is opened, key press should not affect movement on Matrix Playground\n    if (isWidgetOpened()) return;\n    if (keyCode === keyboard.reset) {\n      setBlock(blockCreate({ type: _.sample(blockTypes) ?? 'T' }));\n      setMatrix(blankMatrix);\n      setIsPause(true);\n    }\n    setIsPause((prevIsPause) => {\n      setMatrix((prevMatrix) => {\n        if (!prevIsPause) {\n          if (keyCode === keyboard.rotate) {\n            setBlock((currentBlock) => isBlockValid(blockRotate(currentBlock), prevMatrix) ? blockRotate(currentBlock) : currentBlock);\n          }\n          if (keyCode === keyboard.left) {\n            setBlock((currentBlock) => isBlockValid(blockLeft(currentBlock), prevMatrix) ? blockLeft(currentBlock) : currentBlock);\n          }\n          if (keyCode === keyboard.right) {\n            setBlock((currentBlock) => isBlockValid(blockRight(currentBlock), prevMatrix) ? blockRight(currentBlock) : currentBlock);\n          }\n          if (keyCode === keyboard.down) {\n            setBlock((currentBlock) => {\n              if (isBlockValid(blockFall(currentBlock), prevMatrix)) return blockFall(currentBlock);\n              else {\n                setMatrix(printBlock(currentBlock, prevMatrix));\n                return currentBlock;\n              }\n            });\n          }\n          if (keyCode === keyboard.space) {\n            setBlock((currentBlock) => {\n              const nextBlock = blockDrop(currentBlock, prevMatrix);\n              setMatrix(printBlock(nextBlock, prevMatrix));\n              return nextBlock;\n            });\n          }\n        }\n        return prevMatrix;\n      });\n      return prevIsPause;\n    });\n  });\n};\n","import  React, { useState, useEffect, useContext } from 'react';\nimport _ from 'lodash';\nimport { View, Text } from 'react-native';\nimport useInterval from '@use-it/interval';\nimport { useRoute, RouteProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { SOCKETS, SCORING } from '/config/constants';\nimport { blankMatrix, blockMatrix, penaltyLine } from '/client/constants/tetriminos';\nimport { blockTypes } from '/client/constants/tetriminos';\nimport { ChatWidget, addResponseMessage, dropMessages } from '/client/components/Chat';\nimport Digits from '/client/components/Digits';\nimport { formatChatSubtitle, formatChatTitle, roomPlayersNames, convertMatrixToSpectrum } from '/client/screens/Playground/utils';\nimport Gameboy from '/client/components/Gameboy';\nimport Matrix from '/client/components/Matrix';\nimport { useKeyEvent } from '/client/hooks/useKeyEvent';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\nimport { blockCreate, blockFall, isBlockValid, printBlock, destroyBlock } from '/client/controllers/blockControllers';\n\nexport default function Playground(): JSX.Element {\n  const socket = useContext(SocketContext);\n  const { userContext, setUserContext } = useContext(UserContext);\n  const navigation = useNavigation<StackNavigationProp<RootStackParamList, 'Root'>>();\n\n  const route = useRoute<RouteProp<RootStackParamList, 'Playground'>>();\n  const { params } = route;\n  // const { room, username } = userContext;\n  const { room, username } = params ?? {};\n  const [roomPlayers, setRoomPlayers] = useState<PlayerType[]>([]);\n  const [block, setBlock] = useState<BlockType>(blockCreate({ type: _.sample(blockTypes) ?? 'T' }));\n  const [matrix, setMatrix] = useState<Matrix>(blankMatrix);\n  const [isPause, setIsPause] = useState<boolean>(true);\n  const [player, setCurrentPlayer] = useState<PlayerType>();\n  const [roomLeader, setRoomLeader] = useState<PlayerType>();\n  const [gameover, setGameover] = useState<boolean>(false);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const isSoloMode = _.includes(userContext.room, 'solo') || _.includes(room, 'solo'); // works both for context and URL params\n\n  const filteredOpponents = (roomPlayers: PlayerType[], currentPlayerUsername: string) => {\n    return _.filter(roomPlayers, (player) => player.username !== currentPlayerUsername);\n  };\n\n  useKeyEvent({ setBlock, setMatrix, setIsPause });\n\n  const socketChatMessage = (message: Message) => {\n    addResponseMessage(message.username + ': ' + message.text, message.username);\n  };\n  \n  const handleNewUserMessage = (message: string) => {\n    if (!socket) throw Error('No socket');\n    socket.emit(SOCKETS.CHAT_MESSAGE, { username, message, roomName: room });\n  };\n\n  const socketFetchCurrentPlayer = (player: PlayerType) => {\n    setCurrentPlayer(player);\n    console.log('FETCH_CURRENT_PLAYER', player);\n  };\n\n  const socketUpdateRoomPlayers = (data: { room: string, players: PlayerType[] }) => {\n    setRoomPlayers(data.players);\n    \n    // When old leader leaves the room, we set a new leader\n    // And if new room leader and this room player are the same user, we update isLeader in player (or update the whole player)\n    const newLeader = _.find(data.players, (player) => player.isLeader);\n    setRoomLeader(newLeader);\n    setCurrentPlayer((prevCurrentPlayer) => {\n      if (prevCurrentPlayer && newLeader && prevCurrentPlayer.id === newLeader.id) {\n        return newLeader;\n      }\n      return prevCurrentPlayer;\n    });\n  };\n\n  const socketReceiveStartGame = ({ tilesStack, startTile }: { tilesStack: string[], startTile: string }) => {\n    // TODO: assign tile stack here\n    console.log('START_GAME', startTile, tilesStack, isPause);\n    setGameStarted(true);\n    setIsPause(false);\n  };\n\n  const socketReceivePauseGame = () => {\n    setIsPause(prevState => !prevState);\n  };\n\n  const socketEmitPenaltyRows = (rowsNumber: number) => {\n    if (!socket) throw Error('No socket');\n    console.log('PENALTY_ROWS emit, rowsNumber:', rowsNumber);\n    socket.emit(SOCKETS.PENALTY_ROWS, { username, roomName: room, rowsNumber });\n  };\n\n  const socketReceivePenaltyRows = (rowsNumber: number) => {\n    setMatrix((prevMatrix) => {\n      const newMatrix = addPenaltyRows(prevMatrix, rowsNumber);\n      console.log('PENALTY_ROWS receive. rowsNumber, newMatrix:', rowsNumber, newMatrix);\n      return newMatrix;\n    });\n  };\n  \n  const socketEmitUpdatePlayerScore = () => {\n    if (!socket) throw Error('No socket');\n\n    setCurrentPlayer((prevCurrentPlayer) => {\n      if (!prevCurrentPlayer) return;\n      socket.emit(SOCKETS.UPDATE_SCORE, { username: prevCurrentPlayer.username, roomName: prevCurrentPlayer.room, score: prevCurrentPlayer.score, isSoloMode });\n      return prevCurrentPlayer;\n    });\n  };\n\n  const socketReceiveRedirectToRanking = () => {\n    navigation.push('Ranking', { username, room });\n  };\n\n  const socketEmitGameover = () => {\n    if (isSoloMode) {\n      socketEmitUpdatePlayerScore();\n    } else {\n      if (!socket) throw Error('No socket');\n      socket.emit(SOCKETS.GAMEOVER, { username: userContext.username, roomName: userContext.room });\n    }\n  };\n\n  const socketReceiveGameover = ({ players, endGame }: { players: PlayerType[], endGame: boolean }) => {\n    const roomWinner = _.find(players, (player) => player.isWinner);\n\n    setCurrentPlayer((prevCurrentPlayer) => {\n      if (prevCurrentPlayer && roomWinner && roomWinner.username === prevCurrentPlayer.username) {\n        const playerWithUpdatedScore = { ...prevCurrentPlayer, score: prevCurrentPlayer.score + SCORING.LAST_PLAYER };\n        return playerWithUpdatedScore;\n      }\n      return prevCurrentPlayer;\n    });\n\n    if (endGame) {\n      socketEmitUpdatePlayerScore();\n      setIsPause(true);\n      setMatrix(blankMatrix);\n      setGameover(true);\n    }\n  };\n\n  const socketEmitUpdateSpectrum = (spectrum: Matrix) => {\n    if (!socket) throw Error('No socket');\n    socket.emit(SOCKETS.UPDATE_SPECTRUM, { username: userContext.username, roomName: userContext.room, spectrum });\n  };\n\n  const socketReceiveUpdateSpectrum = (roomPlayers: PlayerType[]) => {\n    console.log('SOCKET.UPDATE_SPECTRUM, roomPlayers', roomPlayers);\n    setRoomPlayers(roomPlayers);\n  };\n\n  useEffect(() => {\n    dropMessages();\n    /*\n    ** TODO: del next line when tmp SOCKETS.ENTER_ROOM by url params is deleted\n    */\n    if (!userContext.username || !userContext.room) setUserContext({ username, room }); // for components that use UserContext\n    console.log('Playground, User context:', userContext);\n    if (!socket) throw Error('No socket');\n\n    /*\n    ** TODO: uncomment when tmp SOCKETS.ENTER_ROOM by url params is deleted\n    */\n    // if (userContext.username && userContext.room) // If not solo mode, enter room\n    socket.emit(SOCKETS.ENTER_ROOM, { username, roomName: room });\n\n    // Current player sent from server\n    socket.on(SOCKETS.FETCH_CURRENT_PLAYER, socketFetchCurrentPlayer);\n\n    // Redirect player to ranking page after player.isWinner score was updated\n    socket.on(SOCKETS.REDIRECT_TO_RANKING, socketReceiveRedirectToRanking);\n\n    if (!isSoloMode) {\n      // Message from server\n      socket.on(SOCKETS.CHAT_MESSAGE, socketChatMessage);\n\n      // When new players join the room\n      socket.on(SOCKETS.UPDATE_ROOM_PLAYERS, socketUpdateRoomPlayers);\n\n      // Receive block type and stack of 3 next blocks\n      socket.on(SOCKETS.START_GAME, socketReceiveStartGame);\n\n      // Pause playgound matrix\n      socket.on(SOCKETS.PAUSE_GAME, socketReceivePauseGame);\n\n      // Receive penalty rows\n      socket.on(SOCKETS.PENALTY_ROWS, socketReceivePenaltyRows);\n\n      // One of opponents has gameover\n      socket.on(SOCKETS.GAMEOVER, socketReceiveGameover);\n\n      // One of opponents updated his spectrum\n      socket.on(SOCKETS.UPDATE_SPECTRUM, socketReceiveUpdateSpectrum);\n    }\n    return () => {\n      socket.emit(SOCKETS.PLAYER_LEFT, username);\n\n      socket.removeListener(SOCKETS.CHAT_MESSAGE, socketChatMessage);\n      socket.removeListener(SOCKETS.FETCH_CURRENT_PLAYER, socketFetchCurrentPlayer);\n      socket.removeListener(SOCKETS.UPDATE_ROOM_PLAYERS, socketUpdateRoomPlayers);\n      socket.removeListener(SOCKETS.START_GAME, socketReceivePauseGame);\n      socket.removeListener(SOCKETS.PAUSE_GAME, socketReceiveStartGame);\n      socket.removeListener(SOCKETS.PENALTY_ROWS, socketReceivePenaltyRows);\n      socket.removeListener(SOCKETS.GAMEOVER, socketReceiveGameover);\n      socket.removeListener(SOCKETS.UPDATE_SPECTRUM, socketReceiveUpdateSpectrum);\n      socket.removeListener(SOCKETS.REDIRECT_TO_RANKING, socketReceiveRedirectToRanking);\n      dropMessages();\n    };\n  }, []);\n\n  const addPenaltyRows = (matrix: Matrix, rowsNumber: number): Matrix => {\n    // Create array of blank lines\n    const penaltyMatrix = Array(rowsNumber).fill(penaltyLine);\n    // Add it to the bottom of matrix (matrix has 20 + rowsNumber lines)\n    const newMatrix = _.cloneDeep([...matrix, ...penaltyMatrix]);\n    // Return matrix without N start lines (matrix has 20 lines again)\n    return _.slice(newMatrix, rowsNumber, newMatrix.length);\n  };\n\n  // const nextBlockType = blockTypes[(_.indexOf(blockTypes, block.type) + 1) % _.size(blockTypes)];\n  const nextBlockType = blockTypes[0]; // TODO: del after debugging\n  useInterval(() => {\n    if (isPause) return;\n    // TODO: What condition do we have on playground screen? If not solo mode, check if user left Playground screen and stop pieces from falling (issue #66 in github)\n    // if (!username) return; // If user left Playground screen\n    if (_.includes(matrix[0], 1)) {\n      setMatrix(blankMatrix);\n      setIsPause(true);\n      setGameover(true);\n      socketEmitGameover();\n    } else {\n      setBlock((currentBlock) => {\n        if (!isBlockValid(blockFall(currentBlock), matrix)) {\n          const { newMatrix, deletedRows } = destroyBlock(printBlock(block, matrix));\n          setMatrix(newMatrix);\n          // if (deletedRows > 1)\n          if (deletedRows > 0) // TODO: del after debugging\n          //   socketEmitPenaltyRows(deletedRows - 1);\n            socketEmitPenaltyRows(deletedRows); // TODO: del after debugging\n\n          socketEmitUpdateSpectrum(convertMatrixToSpectrum(newMatrix));\n\n          // Update player in state each time he gains score\n          setCurrentPlayer((prevCurrentPlayer) => {\n            if (!prevCurrentPlayer) return;\n            const playerWithUpdatedScore = { ...prevCurrentPlayer, score: prevCurrentPlayer.score + SCORING.PIECE_PLACED + SCORING.ROW_DESTROYED * deletedRows };\n            return playerWithUpdatedScore;\n          });\n          return blockCreate({ type: nextBlockType });\n        } else {\n          return blockFall(currentBlock);\n        }\n      });\n    }\n  }, 500);\n\n  return (\n    <>\n      <Gameboy isPause={isPause} setIsPause={setIsPause} roomPlayers={roomPlayersNames(roomPlayers)} isLeader={player?.isLeader} gameStarted={gameStarted} gameover={gameover} isSoloMode={isSoloMode}>\n        <>\n          {username && room &&\n            <Text style={{ fontSize: 16, marginBottom: 10, alignSelf: 'flex-start' }}>{username} @ {room}</Text>\n          }\n          <View style={{ position: 'absolute', zIndex: 1, marginLeft: 600 }}>\n            <Text>{player?.score}</Text>\n            {_.map(filteredOpponents(roomPlayers, userContext.username || ''), (player) =>\n              <View key={player.id} style={{ width: 85 }}>\n                <View style={{ alignItems: 'center' }}><Text style={{ fontWeight: 'bold', color: 'white' }}>{player.username}</Text></View>\n                <Matrix matrix={player.spectrum} isSpectrum={true} block={blockCreate({ type: nextBlockType, pos: [-10, -10] })}/>\n              </View>)\n            }\n          </View>\n          <View style={{ flexDirection: 'row', alignSelf:'flex-start', width: '100%' }}>\n            <Matrix matrix={matrix} block={block}/>\n            <View style={{ marginLeft: 20, flex: 1 }} >\n              <Text style={{ fontSize: 20 }}>Score</Text>\n              <Digits style={{ marginVertical: 10, alignSelf: 'flex-end' }} />\n              <Text style={{ fontSize: 20 }}>Start Line</Text>\n              <Digits style={{ marginVertical: 10, alignSelf: 'flex-end' }} />\n              <Text style={{ fontSize: 20 }}>Level</Text>\n              <Digits style={{ marginVertical: 10, alignSelf: 'flex-end' }} />\n              <Text style={{ fontSize: 20 }}>Next</Text>\n              <Matrix\n                matrix={blockMatrix}\n                block={blockCreate({ type: nextBlockType, pos: [0, 0] })}\n                style={{ borderWidth: 0, marginVertical: 10, alignSelf: 'flex-end' }}\n              />\n            </View>\n          </View>\n        </>\n      </Gameboy>\n      {!isSoloMode &&\n        <ChatWidget title={formatChatTitle(roomLeader?.username ?? 'no leader')} subtitle={formatChatSubtitle(roomPlayersNames(roomPlayers))} handleNewUserMessage={handleNewUserMessage}/>\n      }\n    </>\n  );\n}\n","import  React, { useState, useContext, Dispatch, SetStateAction } from 'react';\nimport { Text, TouchableOpacity, TextInput, View } from 'react-native';\n\nimport { SOCKETS } from '/config/constants';\nimport { checkUsername } from '/client/screens/Login/utils';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\nimport { styles } from '/client/screens/Login';\n\ntype Props = {\n\tsetScreenNumber: Dispatch<SetStateAction<1 | 2>>,\n};\n\nexport default function ChooseUsername(props: Props): JSX.Element {\n  const {setScreenNumber} = props;\n  const { userContext, setUserContext } = useContext(UserContext);\n  const { username } = userContext;\n  const socket = useContext(SocketContext);\n  const [ussernameError, setUsernameError] = useState<string>('');\n\n  const validateUsername = () => {\n    checkUsername(username)\n      .then(data => {\n        if (data === true) {\n          if(!socket) throw Error('No socket');\n          socket.emit(SOCKETS.CREATE_USER, username);\n          setScreenNumber(2);\n        }\n      })\n      .catch(err => {\n        setUsernameError(err.message);\n      });\n  };\n\n  return (\n    <View style={{ width: '100%', alignItems: 'center' }}>\n      <View style={{width: '90%'}}>\n        <Text style={styles.title}>{'Username'}</Text>\n        <Text style={styles.error}>{ussernameError}</Text>\n      </View>\n      <TextInput\n        value={username ?? ''}\n        onChangeText={text => {\n          setUsernameError('');\n          setUserContext({username: text, room: undefined});\n        }}\n        style={styles.input}\n      />\n      <TouchableOpacity\n        style={styles.button}\n        onPress={validateUsername}\n      >\n        <Text style={styles.linkText}>Next</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n","import  React, { useState, useEffect, useContext, Dispatch, SetStateAction } from 'react';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { Text, TouchableOpacity, TextInput, View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { SOCKETS } from '/config/constants';\nimport { checkRoomName, isRoomPlayersLimitAvailable, composeSoloRoomName } from '/client/screens/Login/utils';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\nimport { styles } from '/client/screens/Login';\n\ntype Props = {\n  setScreenNumber: Dispatch<SetStateAction<1 | 2>>,\n};\n\nexport default function ChooseRoom(props: Props): JSX.Element {\n  const {setScreenNumber} = props;\n  const { userContext, setUserContext } = useContext(UserContext);\n  const { username, room: roomName } = userContext;\n  const socket = useContext(SocketContext);\n  const navigation = useNavigation<StackNavigationProp<RootStackParamList, 'Root'>>();\n  const [roomNameError, setRoomNameError] = useState<string>('');\n  const [joinRoomError, setJoinRoomError] = useState<string>('');\n  const [waitingRooms, setWaitingRooms] = useState<string[]>([]);\n\n  if (!username) setScreenNumber(1);\n\n  console.log('Updates for waitingRooms:', waitingRooms);\n\n  const handleFetchWaitingRooms = (roomNames: string[]) => setWaitingRooms(roomNames);\n\n  const handleUpdateWaitingRooms = (roomNames: string[]) => {\n    setRoomNameError('');\n    setJoinRoomError('');\n    return setWaitingRooms(roomNames);\n  };\n\n  const socketEmitChooseOrCreateRoom = (roomName: string  | null | undefined) => {\n    if(!socket) throw Error('No socket');\n    socket.emit(SOCKETS.CHOOSE_ROOM, { username, roomName });\n    username && roomName && navigation.push('Playground', { username, room: roomName });\n  };\n\n  useEffect(() => {\n    if (!socket) throw Error('No socket');\n    // If I remove [] from useEffect there is a flood of sockets, for some reason component rerenders several times a second.\n    socket.emit(SOCKETS.FETCH_WAITING_ROOMS);\n\n    // Get waitingRooms when enter ChooseUsername screen\n    socket.on(SOCKETS.FETCH_WAITING_ROOMS, handleFetchWaitingRooms);\n\n    // Get waitingRooms when other users create / delete rooms and ChooseUsername screen is already open\n    socket.on(SOCKETS.UPDATE_WAITING_ROOMS, handleUpdateWaitingRooms);\n  \n    return () => {\n      socket.removeListener(SOCKETS.FETCH_WAITING_ROOMS, handleFetchWaitingRooms);\n      socket.removeListener(SOCKETS.UPDATE_WAITING_ROOMS, handleUpdateWaitingRooms);\n    };\n  }, []);\n\n  const onCreateRoomPress = (roomName: string | undefined) => {\n    checkRoomName(roomName)\n      .then(data => {\n        if (data === true) {\n          socketEmitChooseOrCreateRoom(roomName);\n          setScreenNumber(1);\n        }\n      })\n      .catch(err => {\n        setJoinRoomError('');\n        setRoomNameError(err.message);\n      });\n  };\n\n  const onJoinRoomPress = (roomName: string | null | undefined) => {\n    setRoomNameError('');\n    setJoinRoomError('');\n    isRoomPlayersLimitAvailable(roomName)\n      .then(data => {\n        if (data === true) {\n          setUserContext({ username, room: roomName });\n          socketEmitChooseOrCreateRoom(roomName);\n          setScreenNumber(1);\n        }\n      })\n      .catch(err => {\n        setRoomNameError('');\n        setJoinRoomError(err.message);\n      });\n  };\n\n  const onSoloModePress = () => {\n    setRoomNameError('');\n    setJoinRoomError('');\n    setUserContext({ username, room: composeSoloRoomName(username) });\n    socketEmitChooseOrCreateRoom(composeSoloRoomName(username));\n  };\n\n  return (\n    <View style={{ width: '100%', alignItems: 'center' }}>\n      <TouchableOpacity\n        style={styles.button}\n        onPress={() => onSoloModePress()}\n      >\n        <Text style={styles.linkText}>Play solo</Text>\n      </TouchableOpacity>\n      <View style={{width: '90%'}}>\n        <Text style={styles.title}>Room name</Text>\n        <Text style={styles.error}>{roomNameError}</Text>\n      </View>\n      <TextInput\n        value={roomName ?? ''}\n        onChangeText={text => {\n          setRoomNameError('');\n          setJoinRoomError('');\n          setUserContext({username, room: text});\n        }}\n        style={styles.input}\n      />\n      <TouchableOpacity\n        style={styles.button}\n        onPress={() => onCreateRoomPress(roomName)}\n      >\n        <Text style={styles.linkText}>Create</Text>\n      </TouchableOpacity>\n      <View style={{ width: '90%' }}>\n        {waitingRooms.length > 0 && <Text style={styles.title}>Join room</Text>}\n        <Text style={styles.error}>{joinRoomError}</Text>\n        {waitingRooms.length > 0 && waitingRooms.map((waitingRoom) =>\n          <View key={waitingRoom}>\n            <TouchableOpacity\n              style={styles.roomsList}\n              onPress={() => onJoinRoomPress(waitingRoom)}\n            >\n              <Text>{waitingRoom}</Text>\n            </TouchableOpacity>\n          </View>)}\n      </View>\n    </View>\n  );\n}\n\n","import  React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport ChooseUsername from '/client/screens/Login/ChooseUsername';\nimport ChooseRoom from '/client/screens/Login/ChooseRoom';\nimport Gameboy from '/client/components/Gameboy';\n\nexport default function Login(): JSX.Element {\n  const [screenNumber, setScreenNumber] = useState<1 | 2>(1);\n\n  return (\n    <Gameboy>\n      <View style={{ alignItems: 'center', width: '60%' }}>\n        {screenNumber === 1\n          ? <ChooseUsername setScreenNumber={setScreenNumber} />\n          : <ChooseRoom setScreenNumber={setScreenNumber} />\n        }\n      </View>\n    </Gameboy>\n  );\n}\n\nexport const styles = StyleSheet.create({\n  title: {\n    marginTop: 30,\n    marginBottom: 5,\n    alignSelf: 'flex-start',\n    textAlign: 'center',\n  },\n  error: {\n    marginBottom: 5,\n    alignSelf: 'flex-start',\n    textAlign: 'center',\n    color: '#980f0f',\n  },\n  linkText: {\n    fontSize: 14,\n  },\n  roomsList: {\n    borderWidth: 1,\n    borderRadius: 5,\n    margin: 3,\n    padding: 2,\n    alignItems:\n\t\t'center',\n  },\n  button: {\n    width: '70%',\n    borderWidth: 1,\n    borderRadius: 10,\n    alignItems: 'center',\n    padding: 3,\n    marginBottom: 10,\n  },\n  input: {\n    borderWidth: 1,\n    marginBottom: 20,\n    height: 30,\n    width: '90%',\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","export const keyboard = {\n  'left': 37,\n  'rotate': 38,\n  'right': 39,\n  'down': 40,\n  'space': 32,\n  'sound': 83,\n  'reset': 82,\n  // 'pause': 80,\n};\n","module.exports = __webpack_public_path__ + \"static/media/sprite.81de6409.png\";","import {createContext} from 'react';\n\nconst userContext = {username: undefined, room: undefined};\n\nconst UserContext = createContext<{userContext: UserContextType, setUserContext: UpdateUserContextType}>({\n  userContext,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setUserContext: () => {},\n});\n\nexport default UserContext;\n","import {createContext} from 'react';\n\nconst SocketContext = createContext<undefined | SocketIOClient.Socket>(undefined);\n\nexport default SocketContext;\n","import axios from 'axios';\nimport _ from 'lodash';\n\nimport { maxPlayersLimit } from '/client/constants/game';\n\nexport const isEmpty = (value?: string | null): boolean => value === undefined || value === null || value === '';\n\nexport const checkTextLength = (text?: string | null): boolean => {\n  const maxLength = 15;\n  if (isEmpty(text)) return false;\n  if (text && text.length > maxLength) return false;\n  return true;\n};\n\nexport const checkSpecialChars = (text?: string | null): boolean => {\n  const regexpr =  new RegExp('\\\\W'); // matches any non-word-character, to only allow [a-zA-Z0-9_]\n  if (!text) return false;\n  if (text.match(regexpr)) return false;\n  return true;\n};\n\nexport const checkUsername = async (username: string | null | undefined): Promise<boolean> => {\n  if (!checkTextLength(username)) throw Error('Name must be 1-15 symbols');\n  if (!checkSpecialChars(username)) throw Error('Use letters and numbers');\n\n  const response = await axios.get(`${process.env.SERVER_URL}/player/${username}`);\n  if (response && isEmpty(response.data.username)) return(true);\n  throw Error('Username already taken');\n};\n\nexport const checkRoomName = async (roomName: string | null | undefined): Promise<boolean | undefined> => {\n  if (!checkTextLength(roomName)) throw Error('Name must be 1-15 symbols');\n  if (!checkSpecialChars(roomName)) throw Error('Use letters and numbers');\n\n  const response = await axios.get(`${process.env.SERVER_URL}/room/${roomName}`);\n  if (response && isEmpty(response.data.name)) return true;\n  throw Error('Room name already taken');\n};\n\n\nexport const isRoomPlayersLimitAvailable = async (roomName: string | null | undefined): Promise<boolean | undefined> => {\n  const response = await axios.get(`${process.env.SERVER_URL}/room/${roomName}`);\n  if (response && response.data.players.length >= maxPlayersLimit)\n    throw Error('Too many players in the room');\n  return true;\n};\n\nexport const composeSoloRoomName = (username?: string): string => {\n  if (!username) return ('solo_' + _.random(1000));\n  return('solo_' + username);\n};\n","import { TouchableOpacity, View, Text, ViewStyle } from 'react-native';\nimport React, { useContext, Dispatch, SetStateAction } from 'react';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { keyboard } from '/client/constants/keyboard';\nimport { SOCKETS } from '/config/constants';\nimport SocketContext from '/client/context/SocketContext';\nimport UserContext from '/client/context/UserContext';\n\nconst RoundButton = ({\n  size, color, label, style, onPress, disabled, text,\n}: {\n  size: number, color: string, label?: string,\n  style?: ViewStyle, onPress?: () => void, disabled?: boolean, text?: string,\n}): JSX.Element => {\n  const button = React.useRef<TouchableOpacity>(null);\n\n  return (\n    <View style={[{ alignItems: 'center' }, style]}>\n      <TouchableOpacity\n        ref={button}\n        disabled={disabled}\n        onPress={() => { button?.current?.blur(); onPress?.();}}\n        style={{\n          backgroundColor: color,\n          borderRadius: size / 2,\n          height: size,\n          width: size,\n          shadowColor: 'rgba(0,0,0, .4)',\n          shadowOffset: { height: 1, width: 1 },\n          shadowOpacity: 20,\n          shadowRadius: 5,\n          justifyContent: 'center',\n          alignItems: 'center',\n        }} >\n        {text && <Text style={{ fontSize: 25 }}>{text}</Text>}\n      </TouchableOpacity>\n      {label && <Text style={{ marginTop: 10 }}>{label}</Text>}\n    </View>\n  );\n};\n\ntype Props = {\n  isPause?: boolean,\n  setIsPause?: Dispatch<SetStateAction<boolean>>,\n  opponentsNumber: number,\n  isLeader?: boolean,\n  gameStarted?: boolean,\n  disabled?: boolean,\n  isSoloMode?: boolean,\n}\n\nconst Keypad = (props: Props): JSX.Element => {\n  const { isPause, setIsPause, opponentsNumber, isLeader, gameStarted, disabled, isSoloMode } = props;\n  const socket = useContext(SocketContext);\n  const { userContext, setUserContext } = useContext(UserContext);\n  const navigation = useNavigation<StackNavigationProp<RootStackParamList, 'Playground'>>();\n  const showStartButton = !isSoloMode && isLeader && !gameStarted;\n  const showPauseButton = (isLeader && gameStarted ) || isSoloMode;\n  const isButtonDisabled = !isSoloMode && (disabled || opponentsNumber < 1);\n\n  const socketEmitStartGame = () => {\n    if (!socket) throw Error('No socket');\n    socket.emit(SOCKETS.START_GAME, { username: userContext.username, roomName: userContext.room });\n  };\n\n  const socketEmitPlayPause = () => {\n    if (isSoloMode) {\n      if (setIsPause) setIsPause(prevState => !prevState);\n    }\n    if (!socket) throw Error('No socket');\n    socket.emit(SOCKETS.PAUSE_GAME, { username: userContext.username, roomName: userContext.room });\n  };\n\n  const socketExitPage = () => {\n    if (!socket) throw Error('No socket');\n    setUserContext({username: undefined, room: undefined});\n    if (setIsPause) setIsPause(true);\n    socket.emit(SOCKETS.PLAYER_LEFT, userContext.username);\n    navigation.navigate('Root');\n  };\n\n  const keyDown = (key: number) => {\n    // @ts-ignore https://github.com/microsoft/TSJS-lib-generator/pull/892\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: key, which: key }));\n  };\n  return (\n    <View style={{ width: 400 }}>\n      <View style={{ width: '100%' }}>\n        <View style={{ flexDirection: 'row', marginVertical: 20, justifyContent: 'space-between'}}>\n          {showStartButton &&\n          <RoundButton\n            color={isButtonDisabled ? '#c0c0c0' : '#2dc421'} size={50} label='Start' text='▶'\n            disabled={isButtonDisabled}\n            onPress={() => socketEmitStartGame()}\n          />}\n          {showPauseButton &&\n            <RoundButton\n              disabled={isButtonDisabled}\n              color={isButtonDisabled ? '#c0c0c0' : '#efcc19'} size={50} label={isPause ? 'Play(P)' : 'Pause(P)'} text={isPause ? '▶' : '||' }\n              onPress={() => socketEmitPlayPause()}\n            />}\n          <RoundButton\n            disabled={isButtonDisabled}\n            color={isButtonDisabled ? '#c0c0c0' : '#2dc421'} size={50} label=\"Sound(S)\"\n            onPress={() => keyDown(keyboard.sound)}\n          />\n          <RoundButton\n            disabled={isButtonDisabled}\n            color={isButtonDisabled ? '#c0c0c0' : '#efcc19'} size={50} label=\"Reset(R)\"\n            onPress={() => keyDown(keyboard.reset)}\n          />\n          <RoundButton\n            color=\"white\" size={50} style={{ margin: 0 }} label='Exit' text='╳'\n            onPress={() => socketExitPage()}\n          />\n        </View>\n        <View style={{ flexDirection: 'row', alignItems: 'center', marginTop: 20 }}>\n          <View style={{ marginRight: 20 }}>\n            <RoundButton\n              color={isButtonDisabled ? '#c0c0c0' : '#5a65f1'} size={160} label=\"Drop(Space)\" style={{ marginTop: 20 }}\n              disabled={isButtonDisabled || isPause}\n              onPress={() => keyDown(keyboard.space)}\n            />\n          </View>\n          <View style={{ marginLeft: 20 }}>\n            <RoundButton\n              color={isButtonDisabled ? '#c0c0c0' : '#5a65f1'} size={70} style={{ margin: 0 }}\n              disabled={isButtonDisabled || isPause}\n              onPress={() => keyDown(keyboard.rotate)}\n            />\n            <View style={{ flexDirection: 'row' }}>\n              <RoundButton\n                color={isButtonDisabled ? '#c0c0c0' : '#5a65f1'} size={70} style={{ margin: 0, marginRight: 60 }}\n                disabled={isButtonDisabled || isPause}\n                onPress={() => keyDown(keyboard.left)}\n              />\n              <RoundButton\n                color={isButtonDisabled ? '#c0c0c0' : '#5a65f1'} size={70} style={{ margin: 0 }}\n                disabled={isButtonDisabled || isPause}\n                onPress={() => keyDown(keyboard.right)}\n              />\n            </View>\n            <RoundButton\n              color={isButtonDisabled ? '#c0c0c0' : '#5a65f1'} size={70} style={{ margin: 0 }}\n              disabled={isButtonDisabled || isPause}\n              onPress={() => keyDown(keyboard.down)}\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default Keypad;\n","import { Dimensions, ScaledSize } from 'react-native';\nimport * as React from 'react';\n\ntype EventValue = {\n  window: ScaledSize;\n  screen: ScaledSize;\n};\n\nexport const useDimensionsSync = (dim: 'window' | 'screen' = 'window'): { width: number, height: number } => {\n  const [dimensions, setDimensions] = React.useState(() => Dimensions.get(dim));\n\n  // Start listening to changes\n  React.useEffect(() => {\n    let stillCareAboutTheCallback = true;\n\n    const updateDimensions = (nextDimensions: EventValue) => {\n      stillCareAboutTheCallback && setDimensions(nextDimensions[dim]);\n    };\n\n    Dimensions.addEventListener('change', updateDimensions);\n\n    return () => {\n      stillCareAboutTheCallback = false;\n      Dimensions.removeEventListener('change', updateDimensions);\n    };\n  }, [dim, setDimensions]);\n\n  return dimensions;\n};\n\nexport const useWindowDimensions = (): { width: number, height: number } => {\n  return useDimensionsSync('window');\n};\n","import React from 'react';\nimport { Text, View } from 'react-native';\n\nimport { styles } from '/client/components/Gameboy';\nimport { maxPlayersLimit } from '/client/constants/game';\n\n\ntype Props = {\n  isMultiplayerMode: boolean,\n  opponentsNumber: number,\n  isLeader?: boolean,\n  gameover?: boolean,\n}\n\nconst PreviewText = (props: Props): JSX.Element  => {\n  const { isMultiplayerMode, opponentsNumber, isLeader, gameover } = props;\n  const secondLineText = (opponentsNumber: number, isLeader?: boolean) => {\n    if (opponentsNumber <= 0) return 'Wait for other players';\n    if (opponentsNumber > 0 && (opponentsNumber + 1 >= maxPlayersLimit) && isLeader) return 'Room is full, press Start to begin';\n    if (opponentsNumber > 0 && isLeader) return 'Press Start to begin';\n    if (opponentsNumber > 0 && (opponentsNumber + 1 >= maxPlayersLimit) && !isLeader) return 'Room is full, ask leader to start the game';\n    if (opponentsNumber > 0 && !isLeader) return 'Wait for leader to start the game';\n  };\n\n  if (gameover) {\n    return (\n      <View style={{ alignItems: 'center' }}>\n        <Text style={styles.gameover}>Game Over</Text>\n        <Text style={styles.gameMode}>Please wait for other players to finish</Text>\n      </View>\n    );\n  }\n  if (isMultiplayerMode) {\n    return (\n      <View style={{ alignItems: 'center' }}>\n        <Text style={styles.gameMode}>You are in multiplayer mode</Text>\n        <Text style={styles.gameMode}>{opponentsNumber} other player(s) in your room</Text>\n        <Text>{secondLineText(opponentsNumber, isLeader)}</Text>\n      </View>\n    );\n  }\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text style={styles.gameMode}>You are in solo mode</Text>\n      <Text>Press Play(P) to start</Text>\n    </View>\n  );\n};\n\nexport default PreviewText;\n","import { StyleSheet, Text, View } from 'react-native';\nimport React, { useContext, Dispatch, SetStateAction } from 'react';\n\nimport Keypad from '/client/components/Keypad';\nimport { useWindowDimensions } from '/client/hooks/useWindowDimensions';\nimport UserContext from '/client/context/UserContext';\nimport PreviewText from '/client/components/Gameboy/PreviewText';\n\ntype Props = {\n  children: React.ReactChild,\n  isPause?: boolean,\n  setIsPause?: Dispatch<SetStateAction<boolean>>,\n  roomPlayers?: string[],\n  isLeader?: boolean,\n  gameStarted?: boolean,\n  gameover?: boolean,\n  isSoloMode?: boolean,\n}\n\nexport default function Gameboy(props: Props): JSX.Element {\n  const {children, isPause, setIsPause, roomPlayers, isLeader, gameStarted, gameover, isSoloMode} = props;\n  const {userContext} = useContext(UserContext);\n  const opponentsNumber = !roomPlayers || roomPlayers.length === 0 ? 0 : roomPlayers.length - 1;\n  const isMultiplayerMode = (userContext.username && userContext.room && !isSoloMode) ? true : false;\n  const window = useWindowDimensions();\n  const w = window.width;\n  const h = window.height;\n  const ratio = h / w;\n  let scale;\n  if (ratio < 1.5) {\n    scale = h / 960;\n  } else {\n    scale = w / 560;\n  }\n\n  const isKeypadDisabled = gameover;\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.gameboy, { transform: [{ scale }] }]}>\n        <Text style={styles.title}>R E D ■ T E T R I S</Text>\n        <View style={styles.display}>\n          {children}\n          {isPause ?\n            <View style={[styles.display, { position: 'absolute', opacity: 0.8 }]} >\n              <PreviewText isMultiplayerMode={isMultiplayerMode} opponentsNumber={opponentsNumber} isLeader={isLeader} gameover={gameover} />\n            </View>\n            : null}\n        </View>\n        <Keypad isPause={isPause} setIsPause={setIsPause} opponentsNumber={opponentsNumber} isLeader={isLeader} gameStarted={gameStarted} disabled={isKeypadDisabled} isSoloMode={isSoloMode}/>\n      </View>\n    </View>\n  );\n}\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1f393e',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    height: '100%',\n  },\n  display: {\n    alignItems: 'center',\n    backgroundColor: '#9ead86',\n    borderBottomColor: '#fa6b6b',\n    borderLeftColor: '#980f0f',\n    borderRightColor: '#fa6b6b',\n    borderTopColor: '#980f0f',\n    borderWidth: 5,\n    height: 500,\n    justifyContent: 'center',\n    padding: 10,\n    width: 400,\n  },\n  gameboy: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#990011',\n    borderRadius: 20,\n    paddingBottom: 30,\n    paddingHorizontal: 50,\n  },\n  title: {\n    fontSize: 30,\n    marginVertical: 15,\n    textAlign: 'center',\n  },\n  gameMode: {\n    marginBottom: 20,\n    fontSize: 18,\n  },\n  gameover: {\n    marginBottom: 20,\n    fontWeight: 'bold',\n    color: '#990011',\n    fontSize: 24,\n  },\n});\n"],"sourceRoot":""}